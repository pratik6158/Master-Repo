h1.textContent='hello'

//+++++++++++++++++++++++++++++++++++++]

<ul>
	<li class="list-item">Item 1</li>
	<li class="list-item">Item 2</li>
	<li class="list-item">Item 3</li>
</ul>

what to do if you wannna select the second li tag now ofcource you can add a uniquue tag to second li tag but still you should understand the official way or the proper systamatic way:-

const ul=document.querySelector('ul')
ul.children[1] :-> 

to select the second one ie item 2


//|++++++++++++++++++++++++++++++++++++++++++++}

now the opposite way lets go from li tag to ul tag>-

const li=document.querySelector('li')
ul=li.parentElement

now if you wanna go to to body its kinda unresonable i mean why would you do that 
but sill in case you wanna do that (document.body)

here is a way to go back in ancestory

li.closest('body')

but if you do 

li.closest('header') which is not wrap li tag so the ans would be null

//++++++++++++++++++++++++++++++++++++++++++++++++++++

but if you are stubborn and wanna still select header you could use sibbling as the ul and header are sibbling inside body tag.

ul.previousElementSibling

and it works otherway aswell 

ul.nextElementSibling

if you select nextSibling or prviousSibling you would select the empty space as it is also an element but its what should i say its texture(idk! what the word so just gonna use the word texture but it is different) is not selected so it is null so it does not appear the html file in chrome or any browser


//++++++++++++++++++++++++++++++++++++++++++

imp shit 

1> classList lecture  160 


//+++++++++++++++++++++++++++++++++++++++++++

now lets say you wanna dynamically change the content of the html with the reload you what do you do one option is that


thk hei side note agar ham ul ko select karage to vo bas ul ke andghar hi hanges kar sakta hei bahar ni ja pai ga vo

thk hei ab main point

const ul=document.querySelector('ul');
ul.innerHTML=ul.innerHTML+'<li>hello this is a new point</li>';

now what this will do is make a new list in a new location and then delete this old one in a small list this is not a problem but in a long list this will take a lot of CPU power and is not very efficient



now a new example lets this time an input tag:-

const input=document.querySelector('input');
input.innerHTML=input.innerHTML+<h2>There is some thing wrong with the input </h2>;


now on the surface there seems to be no problem as it is not even a list so no cpu wastage even if we do this but in this case there is a diff type of problem as now it will copy every thing to a new location now the problem is that the user input is gone..

SO the SOLUTION is :---

element.insertAdjacentHTML(position, text);

just google mdn---- it for more info but i mean the name is self explanitory



//++++++++++++++++++++++++++++++++++++++++++++++++++


document.append VS document.appendChild

side note
const newli=document.createElement('li');
in this case newli is a node this a node generelly0

.appendChild = it accepts only nodes

now .append== it accepts nodes aswell as direct string and can also accept multiple nodes/direct string  at once 

so why use .appendchild at all so the internet exploror does not support appenndchild not the ms Edge the original microsoft exploror that is the ony downside lol:

//++++++++++++++++++++++++++++++++++++++++++++++++++++++

document.getElementby.....

there type of method always give live connection t the element

UNLIKE
//\\\\\\\\\\\\\
query selectors 
//|\\\\\\\\\\\\\

//++++++++++++++++++++++++++++++++++++++++++++

Removing elements form html 

now you could use replace but that  will replace the element but that aint gonna necesserely remove it

so to remove it
node.replaceChild(newnode, oldnode)

const list=document.querySelector('ul');
list.remove();

now this wil not work in internet Exploror so you gotta use

list.parentElement.removeChild(list)

this method right here.


//++++++++++++++++++++++++++++++++++++++++++++++

SUMMERY TIME

1> appendChild()
2> insertAdjecenElement()
3> replaceChild()
4> removeChild()

//use there for proper browser support

5> append()
6> prepend()
7> before()
8> after()
9> replaceWith()
10> remove()
