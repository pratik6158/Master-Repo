Hoisting:-

so whats hoisting generelly means is that it will pull all the declerations to the top 

eg:-

//+++++++++++++++++++++++++
function name(yourname){
	cosnole.log(yourname);
} 
var usrName='Pratik';
name(usrName);
//++++++++++++++++++++++++

so the output will be undefined why??
because inside javascript engine it sees the code as :-

//+++++++++++++++++++++
var usrName;

function name(yourname){
	cosnole.log(yourname);
} 
usrName='Pratik';
name(usrName);

//+++++++++++++++++++

So this is HOISTING and for let and const it gives different error but the concept is same in that also/.


and one more thing with var its kinda consfusing to the other people that why you would do that but and you are not given any punishment for doing such a thing to the other developers but let and const actually forces you to decleare them at the top.



some other features of javascript of ES5

so you can decleare a variable just like :-

pratikyo = 'Pratik';

so the javascript just assumes that oh this poor soul forget to add var let me help him so it just adds var automatically in the binary and this is really bad practice if you are working in a group i mean think about it someone could think that its a redecleration or some shit or the decleration might be in some other file and some more unforgiving behaviours which a nightmare for other devs so to stop this there is a strict mode buit in java script which can be turned on by writing this at the top of the file but this might also turn foo some other features so be aware of that also.

var undefined =3;

this is valid in simple mode bu not in either strict mode or let or const 

:-

'use strict';  



now some serious stuff REFRENCES 

so basically there is two types of data that is primmitive and reference 

primitive = var,let,const,null,boolean,undefined,symbol,etc
reference = all Objects.

now if we say that normal example

var name='aman';
var name_ch=name;

name='shikari';

ab name ki value shikari ho gai hei or name_ch ki value aman hi hei aggred thk hie ye hei primite type ye hota hei isme

//+++++++++++++++++++
ab reference value

var name=['Aman'];
var name_ch=name;

name=['Aman','Shikari'];

ab name ki value name=['Aman','Shikari']; ye hei par ab name_ch ki value bhi ['Aman','Shikari']; ye ho jai gi kyuki object heap mei store hoti hei to unki copy ni banti hei har bar assign karne ke bat isliye unka bas ref hi store hota hei islye agar ek change to dusra bhi change,

but sometimes you do have to make a different copy not jut ref it with another arry/object

so in that case 

var hobbies=['Programing'];

var newHobbies=[...hobbies];

this will copy the entire object and is same for objects.

//++++++++++++++++++++++++++++++
SUPER IMPORTANT LECTURE 119
//++++++++++++++++++++++++++++++

now another case 

const hello=['hello'];
hello.push('boi');

now you think there will be an error[CONST] no babe it will work because remember array/object stores memory location so when we push something into it it changes nothing i mean memory location is still same idk maybe some more momory must have been allocated but memory location is still the same.
so it will work.


but if you try to do something like 

hello=['hello','boi'];

now it will throw error bc basically what is happening is that you are making a band new array and storing it somewhere and then reassigning it to the hello and the n deleting the previous array which will of cource the const keyword will not tolerate 

const keyword be like: NANI!!! omuiya Shinderu
 